#!/usr/bin/env python3.2

import argparse, sys

from json import dump as json_dump
from os.path import exists

from hy454 import align_to_refseq, to_positional
from Bio import SeqIO, AlignIO


_refseqs = {}


def positional_write(msa, fh):
    json_dump(to_positional(msa), fh, separators=(',', ':'))
    fh.write('\n')


def main(infile=sys.stdout, reference=None, outfile=sys.stdout, positional=False):

    if positional is True:
        write = positional_write
    else:
        write = lambda msa, fh: AlignIO.write(msa, fh, 'fasta'),

    seqrecords = [r for r in SeqIO.parse(infile, 'fasta')]

    if reference is None:
        refseq = seqrecords.pop(0)
    else:
        refseq = _refseqs[args.reference]

    msa = align_to_refseq(refseq, seqrecords)

    write(msa, outfile)

    return 0


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='align sequences to a reference using a codon alignment algorithm, returning FASTA by default'
    )
    parser.add_argument(
        'input',
        metavar='FASTAFILE',
        type=argparse.FileType('r'),
        help='unaligned FASTA file'
    )
    parser.add_argument(
        '-r', '--reference',
        choices=_refseqs.keys(),
        help='use a provided default reference sequence'
    )
    parser.add_argument(
        '-p', '--positional',
        action='store_true',
        help='return JSON-formatted reference-relative codon positional format'
    )
    parser.add_argument(
        '-o', '--output',
        type=argparse.FileType('w'),
        help='save alignment to OUTPUT'
    )

    args = None
    retcode = -1
    try:
        args = parser.parse_args()
        retcode = main(args.input, args.reference, args.output, args.positional)
    finally:
        if args is not None:
            if not args.input in (None, sys.stdin):
                args.input.close()
            if not args.output in (None, sys.stdout):
                args.output.close()
    sys.exit(retcode)
