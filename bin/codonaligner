#!/usr/bin/env python3.2

import argparse, sys

from os.path import exists

from hy454 import align_to_refseq
from Bio import SeqIO, AlignIO


_refseqs = {}


def main(argv=None):
    if argv is None:
        argv = sys.argv[1:]

    parser = argparse.ArgumentParser(
        description='align sequences to a reference using a codon alignment algorithm'
    )
    parser.add_argument(
        'input',
        metavar='FASTAFILE',
        type=argparse.FileType('r'),
        help='unaligned FASTA file'
    )
    parser.add_argument(
        '--ref',
        dest='reference',
        choices=_refseqs.keys(),
        help='use a provided default reference sequence'
    )
    parser.add_argument(
        '-p',
        dest='positional',
        action='store_true',
        help='return json-formatted refseq-relative position indices'
    )
    parser.add_argument(
        '--output',
        type=argparse.FileType('w'),
        help='output FASTA alignment to OUTPUT'
    )

    try:
        args = parser.parse_args(argv)

        seqrecords = [r for r in SeqIO.parse(args.input, 'fasta')]

        if args.reference is None:
            refseq = seqrecords.pop(0)
        else:
            refseq = _refseqs[args.reference]

        msa = align_to_refseq(refseq, seqrecords)

        if args.output is not None:
            AlignIO.write(msa, args.output, 'fasta')
        else:
            AlignIO.write(msa, sys.stdout, 'fasta')
    finally:
        args.input.close()
        if args.output is not None:
            args.output.close()

    return 0


if __name__ == '__main__':
    sys.exit(main())
