ExecuteAFile 	(HYPHY_BASE_DIRECTORY+"TemplateBatchFiles"+DIRECTORY_SEPARATOR+"Utility"+DIRECTORY_SEPARATOR+"GrabBag.bf");
ExecuteAFile 	(HYPHY_BASE_DIRECTORY+"TemplateBatchFiles"+DIRECTORY_SEPARATOR+"Utility"+DIRECTORY_SEPARATOR+"DBTools.ibf");

DIV_TABLE = "DIVERSITY_SW";
SW_TABLE = "DIVERSITY_SWS";
UPDATESQL = 1;

sepChar = "\t";

SetDialogPrompt 				("454 run database file:");
DoSQL ( SQL_OPEN, PROMPT_FOR_FILE, ANALYSIS_DB_ID);
DB_PATH = LAST_FILE_PATH;

fprintf ( stdout, "Sliding window width:" );
fscanf	( stdin, "Number", windowSpan );

fprintf ( stdout, "Sliding window stride:" );
fscanf	( stdin, "Number", stride );

fprintf	( stdout, "Minimum number of variants to be considered real:" );
fscanf	( stdin, "Number", minCopyCount );

fprintf ( stdout, "Minimum coverage in sliding windows:" );
fscanf	( stdin, "Number", presetTotalVariants );

fprintf ( stdout, "Threshold for calling dual infection (recommended default of 0.025-0.05):");
fscanf	( stdin, "Number", distanceThreshold );

fprintf ( stdout, "Number of bootstrap replicates:" );
fscanf  ( stdin, "Number", replicateCount );

/*update the settings table*/
SQLString = "";
SQLString * 128;
SQLString * ( "UPDATE SETTINGS SET MIN_COVERAGE='" + presetTotalVariants + "'; UPDATE SETTINGS SET SW_SIZE='" + windowSpan + "'; UPDATE SETTINGS SET SW_STRIDE='" + stride + "'; UPDATE SETTINGS SET MIN_COPIES='" + minCopyCount + "'; UPDATE SETTINGS SET DUAL_INFECTION_THRESHOLD='" + distanceThreshold + "';" );
SQLString * 0;
DoSQL ( ANALYSIS_DB_ID, SQLString, "" ); 


globDBPathArray				= splitFilePath(LAST_FILE_PATH);
globDBPath				= globDBPathArray["DIRECTORY"] + DIRECTORY_SEPARATOR + globDBPathArray["FILENAME"];		


tableInfo = {};
tableInfo["WIDTH"] 					= "INTEGER";
tableInfo["STRIDE"] 				= "INTEGER";
tableInfo["MIN_COVERAGE"] 			= "INTEGER";
tableInfo["DIV_THRESHOLD"] 			= "REAL";
tableInfo["NUM_WINDOWS"] 			= "INTEGER";
tableInfo["MAX_DIVERGENCE"] 		= "REAL";
tableInfo["MAX_DIVERGENCE_WINDOW"] 	= "BLOB";
tableInfo["DUAL_INFECTION"] 		= "BLOB";
_CheckDBID ( ANALYSIS_DB_ID, DIV_TABLE, tableInfo );

tableInfo = {};
tableInfo["START"] 					= "INTEGER";
tableInfo["END"] 					= "INTEGER";
tableInfo["COVERAGE"] 				= "INTEGER";
tableInfo["FREQ_CUTOFF"] 			= "INTEGER";
tableInfo["VARIANTS"] 				= "INTEGER";
tableInfo["DIV_ML"] 				= "REAL";
tableInfo["DIV_MED"] 				= "REAL";
tableInfo["DIV_25"] 				= "REAL";
tableInfo["DIV_975"] 				= "REAL";
tableInfo["DUAL_INFECTION"] 		= "INTEGER";
_CheckDBID ( ANALYSIS_DB_ID, SW_TABLE, tableInfo );

tableName				= "NUC_ALIGNMENT";
haveTable				= _TableExists (ANALYSIS_DB_ID, tableName);

if (haveTable)
{
	max_position   = _ExecuteSQL (ANALYSIS_DB_ID, "SELECT MAX(POSITION) AS MX FROM " + tableName);
	max_position   = 0+(max_position[0])["MX"];

	
	_closeCacheDB	(ANALYSIS_DB_ID);
	
	/*fprintf (stdout, "\nFrom",sepChar,
					 "To",sepChar,"Coverage",sepChar,"FrequencyCutoff",sepChar,"Variants",sepChar,"DivergenceML",sepChar,"DivergenceMedian",sepChar,"Divergence25",sepChar,"Divergence975",sepChar,"Dual\n");
	*/
	
	from = 1;
	to   = windowSpan; 
	
	maxOverall       = 0;
	overTheThreshold = 0;
	processedWindows = 0;
	
	fprintf ( stdout, "From\tTo\tVariants\tThreshold\tretainedVariants\tDiversity\tMedian\t2.5%\t97.5%\tDualInfection\n" );
	
	while (to < max_position)
	{	
	
		metaWrap = {"0": globDBPath + "." + globDBPathArray["EXTENSION"],
					"1": "Nucleotide",
					"2": "No",
					"3": "" + from,
					"4": "" + to,
					"5": "Proportion",
					"6": "0.01",
					"7": "No",
					"8": globDBPath + "_" + from + "_" + to + ".fas"};
		
		if ( !DO_PIPELINE ) {
			GLOBAL_FPRINTF_REDIRECT = "/dev/null";
			ExecuteAFile ("454_sliding_window.bf", metaWrap);
			GLOBAL_FPRINTF_REDIRECT = "";
		}
		else {
			ExecuteAFile ("454_sliding_window.bf", metaWrap);
		}
		
		
		if ( UPDATESQL ) {
			DoSQL ( SQL_OPEN, DB_PATH, ANALYSIS_DB_ID);
		}
		fprintf (stdout, from, sepChar, to, sepChar, variantCount, sepChar );
		
		if (maxDLB == (-1)) /* coverage too low */
		{
			fprintf (stdout, "N/A",sepChar,"N/A",sepChar,"N/A",sepChar,"N/A",sepChar,"N/A",sepChar,"N/A",sepChar,"N/A" );
		}
		else
		{
		
			if  ( UPDATESQL ) {
				SQLString = "";
				SQLString * 128;
				SQLString * ( "INSERT INTO " + SW_TABLE + " VALUES ('" + from + "', '" + to + "', '" + variantCount + "', '" + threshold + "', '" + retainedVariants + "', '" + mleEst + "'" );
			}
		
			fprintf (stdout, threshold, sepChar, retainedVariants, sepChar, mleEst, sepChar);
			processedWindows = processedWindows + 1;
			if (maxDLB == (-2)) /* ML estimate too low */
			{
				 fprintf (stdout, "N/A",sepChar,"N/A",sepChar,"N/A",sepChar,"0");
				 if ( UPDATESQL ) {
					SQLString * ( ", 'NULL', 'NULL', 'NULL', '0' )" );
				 }
			}
			else
			{
				 fprintf (stdout, simDS["Median"], sepChar, simDS["2.5%"], sepChar, simDS["97.5%"], sepChar, maxDLB>distanceThreshold);	
				 overTheThreshold = overTheThreshold + (maxDLB>distanceThreshold);
				 if ( UPDATESQL ) {
					SQLString * ( ", '" + simDS["Median"] + "', '" + simDS["2.5%"] + "', '" + simDS["97.5%"] + "', '" + (maxDLB>distanceThreshold) + "')" );
				 }
			}
			if (mleEst > maxOverall) 
			{
				maxOverall = mleEst;
				maxFrom	   = from;
				maxTo	   = to;
			}
			
			if ( UPDATESQL ) {
				SQLString * 0;
				DoSQL ( ANALYSIS_DB_ID, SQLString, "" );
				DoSQL ( SQL_CLOSE, "", ANALYSIS_DB_ID );
			}
			
		}
		
		fprintf (stdout, "\n");
		
		
		from = from + stride;
		to   = to + stride;
	}
	
	if (processedWindows > 0)
	{
		if ( UPDATESQL ) {
			DoSQL ( SQL_OPEN, DB_PATH, ANALYSIS_DB_ID);
			SQLString = "";
			SQLString * 128;
			SQLString * ( "INSERT INTO " + DIV_TABLE + " VALUES ('" + windowSpan + "', '" + stride + "', '" + presetTotalVariants + "', '" + distanceThreshold + "', '" + processedWindows + "', '" + maxOverall + "', '" + maxFrom + "-" + maxTo + "', '" + overTheThreshold + "(" + Format (overTheThreshold/processedWindows*100,5,2) + "%)')" );
			SQLString * 0;
			DoSQL ( ANALYSIS_DB_ID, SQLString, "" );
			DoSQL ( SQL_CLOSE, "", ANALYSIS_DB_ID );
		}
		
		fprintf (stdout, "\n\nRun summary",
						 "\n\tWindow width             : ", windowSpan,
						 "\n\tWindow stride            : ", stride,
						 "\n\tMinimum coverage         : ", presetTotalVariants,
						 "\n\tDivergence threshold     : ", distanceThreshold,
						 "\n\tWindows processed        : ", processedWindows,
						 "\n\tMax    divergence        : ", maxOverall,
						 "\n\tWindow for max.div       : ", maxFrom, "-", maxTo,
						 "\n\tCalls for dual infection : ", overTheThreshold, "(", Format (overTheThreshold/processedWindows*100,5,2),"%)",
						"\n");
						
		if  ( retainedVariants > 3 )  { /*maximum dviersity with more than 3 variants for tree drawing*/
			
			metaWrap = {"0": globDBPath + "." + globDBPathArray["EXTENSION"],
				"1": "Nucleotide",
				"2": "No",
				"3": "" + maxFrom,
				"4": "" + maxTo,
				"5": "Proportion",
				"6": "0.01",
				"9":  globDBPath + "max_" + maxFrom + "_" + maxTo + ".fas"};
			
			ChoiceList		(clones,"Include clonal sequences?", 1, SKIP_NONE, "Yes", "Include existing clones", "No", "Do not include clonal sequences");
			if (clones == 0)
			{
				SetDialogPrompt ("Read clones from:");
				fscanf (PROMPT_FOR_FILE, "Raw", cloneSeqs);
				metaWrap["7"] = "Yes";
				metaWrap["8"] = LAST_FILE_PATH;
			}
			else
			{
				metaWrap["7"] = "No";
			}
			
			/*fprintf ( stdout, metaWrap, "\n" );*/
			
			if ( !DO_PIPELINE ) {
				GLOBAL_FPRINTF_REDIRECT = "/dev/null";
				ExecuteAFile ("454_region_extract.bf", metaWrap);
				GLOBAL_FPRINTF_REDIRECT = "";	
			}
			else {
				ExecuteAFile ("454_region_extract.bf", metaWrap);
			}
		}	
		
		
	}
	else
	{
		fprintf (stdout, "ERROR: No windows had sufficient coverage for processing. Consider reducing the minimum coverage requirement.\n")
	}
}
else {
	_closeCacheDB	(ANALYSIS_DB_ID);
}

