#!/usr/bin/env python3.2

from __future__ import division, print_function

import argparse, sys

from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
from Bio.Seq import Seq

from BioExt import UntranslationTable, untranslate

from subprocess import Popen, PIPE

def main(
    infile=None,
    outfile=None,
    permute=False,
    readnumber=1000,
    hperrors=False
    ):

    if infile is None:
        infile = sys.stdin

    if outfile is None:
        outfile = sys.stdout

    refseq = SeqIO.read(infile, 'fasta')

    if permute:
        tbl = UntranslationTable(refseq)
        refseq = SeqRecord(Seq(untranslate(refseq.seq.translate(), table=tbl)))

    # Run clonesim
    p = Popen(['clonesim', '-c', str(readnumber)], stdin=PIPE, stdout=PIPE)
    out, _ = p.communicate(refseq.format('fasta').encode())

    # Run kitsim
    p = Popen(['kitsim'], stdin=PIPE, stdout=PIPE)
    out, _ = p.communicate(out)

    if hperrors:
        # Run flowsim
        p = Popen(['flowsim', '-o', 'reads.sff'], stdin=PIPE, stdout=PIPE)
        out, _ = p.communicate(out)

        # Run flower
        p = Popen(['flower', 'reads.sff', '-f'], stdout=PIPE)
        out, _ = p.communicate()

    print(out.decode(), file=outfile)

    return 0


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        description='align sequences to a reference using a codon alignment algorithm, returning FASTA by default'
    )

    parser.add_argument(
        'input',
        metavar='FASTAFILE',
        type=argparse.FileType('r'),
        help='unaligned FASTA file'
    )
    parser.add_argument(
        '-o', '--output',
        type=argparse.FileType('w'),
        default=sys.stdout,
        help='save alignment to OUTPUT'
    )
    parser.add_argument(
        '-P', '--permute',
        action='store_true',
        help='permute the reference by translate+untranslate the sequence'
    )
    parser.add_argument(
        '-N', '--readnumber',
        metavar='READNUMBER',
        type=int,
        default=1000,
        nargs=1,
        help='target number of reads generated from this gene'
    )
    parser.add_argument(
        '-H', '--hperrors',
        action='store_true',
        help='introduce homopolymer length miscalls'
    )

    args = None
    retcode = -1
    try:
        args = parser.parse_args()
        retcode = main(
            args.input,
            args.output,
            args.permute,
            args.readnumber,
            args.hperrors
        )
    finally:
        if args is not None:
            if not args.input in (None, sys.stdin):
                args.input.close()
            if not args.output in (None, sys.stdout):
                args.output.close()
    sys.exit(retcode)
