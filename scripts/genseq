#!/usr/bin/env python3.2

from __future__ import division, print_function

import argparse, sys

from os import close
from re import compile as re_compile
from subprocess import Popen, PIPE
from tempfile import mkstemp

from six import StringIO

from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
from Bio.Seq import Seq

from BioExt import UntranslationTable, untranslate

def main(
    infile=None,
    outfile=None,
    permute=False,
    readnumber=1000,
    tags=False,
    errors=False):

    if infile is None:
        infile = sys.stdin

    if outfile is None:
        outfile = sys.stdout

    refseq = SeqIO.read(infile, 'fasta')

    if permute:
        tbl = UntranslationTable(refseq)
        refseq = SeqRecord(Seq(untranslate(refseq.seq.translate(), table=tbl)))

    # Run clonesim
    p = Popen(['clonesim', '-c', '%d' % readnumber], stderr=PIPE, stdin=PIPE, stdout=PIPE)
    out, _ = p.communicate(refseq.format('fasta').encode())

    # Run kitsim
    p = Popen(['kitsim'], stderr=PIPE, stdin=PIPE, stdout=PIPE)
    out, _ = p.communicate(out)

    if errors:
        # Run flowsim
        fd, tmpfile = mkstemp(); close(fd)
        p = Popen(['flowsim', '-o', tmpfile], stderr=PIPE, stdin=PIPE, stdout=PIPE)
        _, _ = p.communicate(out)

        obuf = StringIO()

        with open(tmpfile, 'rb') as fh:
            SeqIO.convert(fh, 'sff', obuf, 'fasta')
    else:
        obuf = StringIO(out.decode())

    obuf.seek(0)

    if not tags:
        headtag = re_compile(r'^[a-z]+')
        tailtag = re_compile(r'[a-z]+$')
        for sr in SeqIO.parse(obuf, 'fasta'):
            seq = str(sr.seq)
            m = headtag.search(seq)
            if m:
                sr = sr[len(m.group(0)):]
            m = tailtag.search(seq)
            if m:
                sr = sr[:-len(m.group(0))]
            print(sr.format('fasta'), end='', file=outfile)
    else:
        print(obuf.getvalue(), file=outfile)

    obuf.close()

    return 0


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        description='align sequences to a reference using a codon alignment algorithm, returning FASTA by default'
    )

    parser.add_argument(
        'input',
        metavar='FASTAFILE',
        type=argparse.FileType('r'),
        help='unaligned FASTA file'
    )
    parser.add_argument(
        '-o', '--output',
        type=argparse.FileType('w'),
        default=sys.stdout,
        help='save alignment to OUTPUT'
    )
    parser.add_argument(
        '-p', '--permute',
        action='store_true',
        help='permute the reference by translate+untranslate the sequence'
    )
    parser.add_argument(
        '-n', '--readnumber',
        metavar='READNUMBER',
        type=int,
        default=1000,
        help='target number of reads generated from this gene'
    )
    parser.add_argument(
        '-t', '--tags',
        action='store_true',
        help='leave in 454 adaptamer tags'
    )
    parser.add_argument(
        '-e', '--errors',
        action='store_true',
        help='introduce homopolymer length miscalls'
    )

    args = None
    retcode = -1
    try:
        args = parser.parse_args()
        retcode = main(
            args.input,
            args.output,
            args.permute,
            args.readnumber,
            args.tags,
            args.errors
        )
    finally:
        if args is not None:
            if not args.input in (None, sys.stdin):
                args.input.close()
            if not args.output in (None, sys.stdout):
                args.output.close()
    sys.exit(retcode)
