#!/usr/bin/env python3.2

from __future__ import division, print_function

import argparse, sys

from Bio import SeqIO

from BioExt import (BLOSUM62, DNA65, DNA70, DNA80,
    DNA88, DNA95, HIV_BETWEEN_F, PAM200, PAM250)

from hy454 import validate

_dna_score_matrices = {
    'DNA65': DNA65,
    'DNA70': DNA70,
    'DNA80': DNA80,
    'DNA88': DNA88,
    'DNA95': DNA95
}

_protein_score_matrices = {
    'BLOSUM62': BLOSUM62,
    'HIV_BETWEEN_F': HIV_BETWEEN_F,
    'PAM200': PAM200,
    'PAM250': PAM250
}

def main(
    reference=None,
    infile=None,
    dna_score_matrix=None,
    protein_score_matrix=None,
    dna_mismatch=0,
    protein_mismatch=0,
    outfile=None,
    codon=False,
    expected_identity=None,
    keep_insertions=True):

    if infile is None:
        infile = sys.stdin

    if outfile is None:
        outfile = sys.stdout

    if expected_identity is None:
        expected_identity = 0.

    refrecord = SeqIO.read(reference, 'fasta')
    seqrecords = [r for r in SeqIO.parse(infile, 'fasta')]

    if protein_score_matrix is None:
        psm = BLOSUM62.load()
    else:
        psm = _protein_score_matrices[protein_score_matrix].load()

    if dna_score_matrix is None:
        dsm = DNA65.load()
    else:
        dsm = _dna_score_matrices[dna_score_matrix].load()

    lengths, dna_scores, protein_scores = validate(
        refrecord,
        seqrecords,
        dna_score_matrix=dsm,
        protein_score_matrix=psm,
        dna_mismatch=dna_mismatch,
        protein_mismatch=protein_mismatch,
        codon=codon,
        revcomp=False,
        expected_identity=expected_identity,
        keep_insertions=keep_insertions,
        quiet=False)

    print(lengths, dna_scores, protein_scores, file=outfile)

    return 0


if __name__ == '__main__':
    def probability(string):
        try:
            p = float(string)
            if p < 0 or p > 1:
                raise ValueError()
            return p
        except ValueError:
            msg = "'%s' is not a probability in [0, 1]" % string
            raise argparse.ArgumentTypeError(msg)

    parser = argparse.ArgumentParser(
        description='align sequences to a reference using a codon alignment algorithm, returning FASTA by default'
    )

    parser.add_argument(
        'reference',
        metavar='REFFILE',
        type=argparse.FileType('r'),
        help='reference FASTA file'
    )
    parser.add_argument(
        'input',
        metavar='FASTAFILE',
        type=argparse.FileType('r'),
        help='unaligned FASTA file'
    )
    parser.add_argument(
        '-d', '--dnascorematrix',
        choices=sorted(_dna_score_matrices.keys()),
        help='use a specific DNA scoring matrix [default=DNA65]'
    )
    parser.add_argument(
        '-p', '--proteinscorematrix',
        choices=sorted(_protein_score_matrices.keys()),
        help='use a specific protein scoring matrix [default=BLOSUM62]'
    )
    parser.add_argument(
        '-o', '--output',
        type=argparse.FileType('w'),
        default=sys.stdout,
        help='save alignment to OUTPUT'
    )
    parser.add_argument(
        '-c', '--codon',
        action='store_true',
        help="use codon-aware alignment algorithm"
    )
    parser.add_argument(
        '-i', '--identity',
        metavar='PROBABILITY',
        type=probability,
        default=0.,
        help='disregard sequences that are insufficiently identical to the reference'
    )
    parser.add_argument(
        '-m', '--mismatch',
        metavar='MISMATCH',
        type=int,
        default=[0, 0],
        nargs=2,
        help='mismatch penalty for DNA and protein scoring [default=(0, 0)]'
    )
    parser.add_argument(
        '-I', '--noinsertions',
        action='store_false',
        help='ignore insertions'
    )

    args = None
    retcode = -1
    try:
        args = parser.parse_args()
        dnamismatch, proteinmismatch = args.mismatch
        retcode = main(
            args.reference,
            args.input,
            args.dnascorematrix,
            args.proteinscorematrix,
            dnamismatch,
            proteinmismatch,
            args.output,
            args.codon,
            args.identity,
            args.noinsertions
        )
    finally:
        if args is not None:
            if not args.input in (None, sys.stdin):
                args.input.close()
            if not args.output in (None, sys.stdout):
                args.output.close()
    sys.exit(retcode)
